from convokit import Transformer, Corpus
from convokit.hyperconvo import Hypergraph
from .triadMotifExtractor import TriadMotifExtractor

class TriadMotifTransformer(Transformer):
    def __init__(self, prefix_len: int = 10, min_thread_len: int = 10):
        self.prefix_len = prefix_len
        self.min_thread_len = min_thread_len

    def transform(self, corpus: Corpus) -> Corpus:
        """
        Same as fit_transform()
        """
        return self.fit_transform(corpus)

    def fit_transform(self, corpus: Corpus, y=None) -> Corpus:
        """
        fit_transform() retrieves features from the corpus conversational
        threads using retrieve_feats()

        :param corpus: Corpus object to retrieve feature information from

        :return: corpus with conversations having a new meta field "hyperconvo" containing the stats generated by retrieve_feats(). Each conversation's metadata then contains the stats for the thread(s) it contains.
        """
        for convo in corpus.iter_conversations():
            utt_list = convo.get_chronological_utterance_list()
            if len(utt_list) < self.min_thread_len:
                convo.meta['triad_motifs'] = None
            else:
                hg = Hypergraph.init_from_utterances(utt_list[:self.prefix_len])
                extractor = TriadMotifExtractor(hypergraph=hg)
                convo.meta['triad_motifs'] = extractor.extract_motifs()

        return corpus

    def summarize(self, corpus: Corpus):
        pass
