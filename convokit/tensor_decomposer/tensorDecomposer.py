import numpy as np
from convokit.transformer import Transformer
from typing import Optional, Callable, List
from convokit.model import Corpus, Conversation, CorpusObject
from tensorly.decomposition import parafac
import matplotlib.pyplot as plt
import os
import seaborn as sns
from .graphics import get_graphic_dict
from sklearn.preprocessing import StandardScaler
from collections import defaultdict, Counter
from jinja2 import Environment, FileSystemLoader
import shutil

class TensorDecomposer(Transformer):
    """

    :param feature_set: ordered list of features to use in construct the tensor, e.g. hyperconv-1, hyperconv-2...,
        where hyperconv-1 is a dictionary
    :param normalize: whether to normalize the tensor before decomposition

    :ivar tensor: constructed tensor (constructed during transform step), None otherwise
    :ivar features: features used in constructing the tensor
    """

    def __init__(self, feature_set: List[str], obj_type: str = "conversation", rank: int = 9, normalize: bool = False,
                 anomaly_threshold = 1.5, impute_na: float = -1, group_func = lambda obj: obj.id):
        self.obj_type = obj_type
        self.feature_set = feature_set
        self.rank = rank
        self.normalize = normalize
        self.anomaly_threshold = anomaly_threshold
        self.impute_na = impute_na
        self.group_func = group_func

        self.tensor = None
        self.features = None
        self.obj_ids = None
        self.factors = None
        self.groups = None # equivalent of subreddits

    def _construct_tensor(self, corpus, selector: Optional[Callable[[CorpusObject], bool]] = lambda obj: True):
        """
        Constructs the 3-way data tensor
        :param corpus: input corpus
        :param selector: selector for corpus objects
        :return: constructed tensor
        """
        objs = list(corpus.iter_objs(self.obj_type, selector=selector))
        num_objs = len(objs)
        self.obj_ids = [obj.id for obj in objs]

        self.groups = [self.group_func(obj) for obj in objs]

        num_feature_sets = len(self.feature_set)

        self.features = list(objs[0].meta[self.feature_set[0]])
        num_features = len(self.features)

        tensor = np.zeros((num_feature_sets, num_objs, num_features))

        for obj_idx, obj in enumerate(objs):
            for feat_idx, feat_name in enumerate(self.feature_set):
                tensor[feat_idx][obj_idx] = list(obj.meta[feat_name].values())

        if self.impute_na is not None:
            tensor[np.isnan(tensor)] = self.impute_na

        return tensor

    @staticmethod
    def _min_max_scale(mat):
        max_ = np.max(mat)
        min_ = np.min(mat)
        return (mat - min_) / (max_ - min_)

    @staticmethod
    def _normalize(tensor):
        tensor = tensor.copy()
        for i in range(tensor.shape[2]):
            tensor[:, :, i] = TensorDecomposer._min_max_scale(tensor[:, :, i])
        return tensor

    def fit(self, corpus: Corpus, y=None, selector: Optional[Callable[[CorpusObject], bool]] = lambda obj: True):
        """
        Retrieves features from the Corpus Conversations using retrieve_feats() and annotates Conversations with this feature set

        :param corpus: Corpus object to retrieve feature information from
        :param selector: a (lambda) function that takes a Conversation and returns True / False; function selects
            conversations to be annotated with hypergraph features. By default, all conversations will be annotated.
        :return: corpus with conversations having a new meta field with the specified feature name  containing the stats generated by retrieve_feats().
        """
        # construct + normalize tensor
        print("Constructing tensor...", end="")
        tensor = self._construct_tensor(corpus, selector)
        print("Done.")
        if self.normalize:
            tensor = self._normalize(tensor)
        self.tensor = tensor

        # decompose tensor
        print("Decomposing tensor...", end="")
        self.factors = parafac(tensor, rank=self.rank)[1]
        print("Done.")

        return self

    @staticmethod
    def _generate_plots(factors, axis_names, output_dir, d=3):
        a, b, c = factors
        rank = a.shape[1]
        for component_idx in range(rank):
            fig, ax = plt.subplots(1, d, figsize=(8, int(1.2+1)))
            ax[0].set_ylabel("Component " + str(component_idx+1))
            factors_name = axis_names if d==3 else ["Time", "Features"]

            for col_idx in range(d):
                sns.despine(top=True, ax=ax[col_idx])
                ax[col_idx].plot(factors[col_idx].T[component_idx])
                ax[col_idx].set_xlabel(factors_name[col_idx])
            plt.savefig(os.path.join(output_dir, 'graphs', 'component_plot_{}.png'.format(component_idx+1)))


    def _get_anomalous_points(self, factor_full, idx):
        scaler = StandardScaler()
        factor = factor_full[:, idx]
        reshaped = factor.reshape((factor.shape[0], 1))
        scaled = scaler.fit_transform(reshaped)
        pos_pts = np.argwhere(scaled.reshape(factor.shape[0]) > self.anomaly_threshold).flatten()
        neg_pts = np.argwhere(scaled.reshape(factor.shape[0]) < -self.anomaly_threshold).flatten()
        return pos_pts, neg_pts

    def _generate_high_level_summary(self):
        # generate_plots()

        factor1, factor2, factor3 = self.factors # time, thread, feature

        idx_to_distinctive_threads = defaultdict(dict)
        idx_to_distinctive_features = defaultdict(dict)

        # normalizing
        group_totals = Counter(self.groups)
        for idx in range(self.rank):
            pos_thread_pts, neg_thread_pts = self._get_anomalous_points(factor2, idx)
            idx_to_distinctive_threads[idx]['pos_threads'] = Counter([self.groups[i] for i in pos_thread_pts])
            idx_to_distinctive_threads[idx]['neg_threads'] = Counter([self.groups[i] for i in neg_thread_pts])

            # normalize group counts
            for group in idx_to_distinctive_threads[idx]['pos_threads']:
                idx_to_distinctive_threads[idx]['pos_threads'][group] /= group_totals[group]
                idx_to_distinctive_threads[idx]['neg_threads'][group] /= group_totals[group]

            pos_features, neg_features = self._get_anomalous_points(factor3, idx)
            idx_to_distinctive_features[idx]['pos_features'] = [self.features[i] for i in pos_features]
            idx_to_distinctive_features[idx]['neg_features'] = [self.features[i] for i in neg_features]

        component_to_details = dict()
        for idx in range(self.rank):
            component_to_details[idx] = dict()
            pos_groups = sorted(list(idx_to_distinctive_threads[idx]['pos_threads'].items()),
                                    key=lambda x: x[1], reverse=True)
            component_to_details[idx]['pos_groups'] = [k for k, v in pos_groups[:5]]
            neg_groups = sorted(list(idx_to_distinctive_threads[idx]['neg_threads'].items()),
                                    key=lambda x: x[1], reverse=True)
            component_to_details[idx]['neg_groups'] = [k for k, v in neg_groups[:5]]

            component_to_details[idx]['pos_features'] = get_graphic_dict(idx_to_distinctive_features[idx]['pos_features'][:10])
            component_to_details[idx]['neg_features'] = get_graphic_dict(idx_to_distinctive_features[idx]['neg_features'][:10])

        return component_to_details


    def _generate_html(self, title, output_dir):
        root = os.path.dirname(os.path.abspath(__file__))
        component_to_details = self._generate_high_level_summary()
        env = Environment(loader=FileSystemLoader(os.path.join(root, 'template')))
        template = env.get_template('report.html')
        filename = os.path.join(output_dir, "report.html")
        with open(filename, 'w') as fh:
            fh.write(
                template.render(title=title, component_to_details=component_to_details,
                                graph_filepath=os.path.join(output_dir, "graphs"))
            )

    def transform(self, corpus: Corpus, **kwargs) -> Corpus:
        return corpus

    def summarize(self, corpus: Corpus, axis_names: List[str], output_dir: str = '.',
                  report_title="Report"):
        self._generate_plots(self.factors, axis_names, output_dir)
        shutil.copytree("./static", output_dir)
        shutil.copytree("./images", output_dir)
        self._generate_html(report_title, output_dir)

